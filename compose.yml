# Full Stack Docker Compose
# Brings up all microservices: Auth, Tasks, Databases, RabbitMQ
# Usage: docker compose up -d

version: "3.8"

services:
  # ==========================================
  # Message Broker - RabbitMQ
  # ==========================================
  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    hostname: rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI (http://localhost:15672)
    networks:
      - microservices
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # ==========================================
  # Auth Service Database
  # ==========================================
  auth_db:
    image: postgres:16-alpine
    container_name: auth_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_pass
      POSTGRES_DB: auth_db
    volumes:
      - auth_db_data:/var/lib/postgresql/data
      - ./auth/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - microservices
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # ==========================================
  # Tasks Service Database
  # ==========================================
  tasks_db:
    image: postgres:16-alpine
    container_name: tasks_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: tasks_user
      POSTGRES_PASSWORD: tasks_pass
      POSTGRES_DB: tasks_db
    volumes:
      - tasks_db_data:/var/lib/postgresql/data
      - ./tasks/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    networks:
      - microservices
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tasks_user -d tasks_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # ==========================================
  # Auth Service (Node.js)
  # ==========================================
  auth_service:
    build:
      context: ./auth
      dockerfile: Dockerfile
    container_name: auth_service
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: auth_db
      DB_PORT: 5432
      DB_USER: auth_user
      DB_PASSWORD: auth_pass
      DB_NAME: auth_db
      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672
      JWT_SECRET: 9e4e1cd562230d9fab1e744580e0ffba
      JWT_EXPIRES_IN: 24h
    ports:
      - "3001:3001"
    networks:
      - microservices
    depends_on:
      auth_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3001/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==========================================
  # Tasks Service (Go)
  # ==========================================
  tasks_service:
    build:
      context: ./tasks
      dockerfile: Dockerfile
    container_name: tasks_service
    restart: unless-stopped
    environment:
      PORT: 3002
      DB_HOST: tasks_db
      DB_PORT: 5432
      DB_USER: tasks_user
      DB_PASSWORD: tasks_pass
      DB_NAME: tasks_db
      DB_SSLMODE: disable
      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672
      RABBITMQ_EXCHANGE: auth_events
      RABBITMQ_QUEUE: tasks-service-queue
      JWT_SECRET: 9e4e1cd562230d9fab1e744580e0ffba
    ports:
      - "3002:3002"
    networks:
      - microservices
    depends_on:
      tasks_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3002/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# ==========================================
# Volumes
# ==========================================
volumes:
  rabbitmq_data:
    driver: local
    name: microservices_rabbitmq_data
  auth_db_data:
    driver: local
    name: microservices_auth_db_data
  tasks_db_data:
    driver: local
    name: microservices_tasks_db_data

# ==========================================
# Networks
# ==========================================
networks:
  microservices:
    driver: bridge
    name: microservices_network
